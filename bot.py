import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from game import Game
from database import init_db, get_user_record, update_user_record, get_top_players

# üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –ß–ò–°–¢–´–ô URL ‚Äî –û–ë–†–ï–ó–ê–ï–ú –ü–†–û–ë–ï–õ–´
BOT_TOKEN = "8498252537:AAFS94y2DJEUOVjOZHx0boHiVvbMrV1T7dc"
WEBHOOK_URL = "https://testisk-zmeika.onrender.com/webhook".strip()  # ‚Üê .strip() –£–î–ê–õ–Ø–ï–¢ –í–°–ï –ü–†–û–ë–ï–õ–´!
PORT = int(os.environ.get('PORT', 10000))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

init_db()
# üî• –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
active_games = {}
game_locks = {}  # user_id -> asyncio.Lock

def get_user_lock(user_id: int) -> asyncio.Lock:
    if user_id not in game_locks:
        game_locks[user_id] = asyncio.Lock()
    return game_locks[user_id]

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    kb = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
        [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="show_leaderboard")],
        [InlineKeyboardButton(text="üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")]
    ]
    await message.answer(
        "üêç *Snake RPG Evolution*\n\n–°—ä–µ–¥–∞–π –µ–¥—É, –∏–∑–±–µ–≥–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, —Å–æ–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã –∏ –º–æ–±–æ–≤!\n–ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –∑–º–µ—è ‚Äî —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query(lambda c: c.data == "start_game")
async def start_game(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logging.info(f"üéÆ [USER {user_id}] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É'")
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ —Å—Ä–∞–∑—É

    username = callback.from_user.username or f"User{user_id}"
    game = Game(user_id, username)
    active_games[user_id] = game

    board = game.render_board()
    status = f"\n–û—á–∫–∏: {game.score} üéØ | –î–ª–∏–Ω–∞: {len(game.snake)} üêç | –£—Ä–æ–≤–µ–Ω—å: {game.level_name}"
    msg = await callback.message.answer(
        f"```\n{board}\n```\n{status}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_control_keyboard()  # ‚Üê –ë–ï–ó await, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    )

# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù async ‚Äî —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è!
def get_control_keyboard():
    kb = [
        [InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data="move_up")],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="move_left"),
            InlineKeyboardButton(text="‚¨áÔ∏è", callback_data="move_down"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="move_right")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@dp.callback_query(lambda c: c.data.startswith("move_"))
@dp.callback_query(lambda c: c.data.startswith("move_"))
async def handle_move(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logging.info(f"üêç [USER {user_id}] –î–≤–∏–∂–µ–Ω–∏–µ: {callback.data}")

    # üî• –§–ò–ö–°: –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å race condition
    lock = get_user_lock(user_id)
    async with lock:
        if user_id not in active_games:
            await callback.answer("‚ùó –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é!", show_alert=True)
            return

        game = active_games[user_id]
        if not game.is_alive:
            await callback.answer("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return

        direction = callback.data.split("_")[1]
        game.move(direction)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        board = game.render_board()
        status = f"\n–û—á–∫–∏: {game.score} üéØ | –î–ª–∏–Ω–∞: {len(game.snake)} üêç | –£—Ä–æ–≤–µ–Ω—å: {game.level_name}"

        try:
            # üî• –§–ò–ö–°: –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –ò –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!
            await callback.message.edit_text(
                f"```\n{board}\n```\n{status}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_control_keyboard()  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
            )
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Game Over
        if not game.is_alive:
            record_updated = update_user_record(game.user_id, game.username, game.score)
            achievements = check_achievements(game)
            msg = f"üíÄ *GAME OVER*\n\n–û—á–∫–∏: {game.score}\n–î–ª–∏–Ω–∞: {len(game.snake)}"
            if record_updated:
                msg += "\n\nüèÜ *–ù–æ–≤—ã–π –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥!*"
            if achievements:
                msg += "\n\nüéñÔ∏è *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n" + "\n".join(achievements)

            kb = [[InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start_game")]]
            try:
                await callback.message.edit_text(
                    msg,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ Game Over: {e}")
            del active_games[user_id]
            return

        # üî• –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –û–ë–ù–û–í–õ–Ø–ï–¢–°–Ø –∑–¥–µ—Å—å (–≤ edit_text –≤—ã—à–µ) ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ!

@dp.callback_query(lambda c: c.data == "show_leaderboard")
async def show_leaderboard(callback: types.CallbackQuery):
    await callback.answer()
    top_players = get_top_players()
    msg = "üèÜ *–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:*\n\n" + "\n".join(f"{i}. @{username} ‚Äî {score} –æ—á–∫–æ–≤" for i, (username, score) in enumerate(top_players, 1))
    kb = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "show_achievements")
async def show_achievements(callback: types.CallbackQuery):
    await callback.answer()
    msg = "üéñÔ∏è *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n1. üå± *–ù–æ–≤–∏—á–æ–∫* ‚Äî –Ω–∞–±—Ä–∞—Ç—å 10 –æ—á–∫–æ–≤\n2. üêâ *–û—Ö–æ—Ç–Ω–∏–∫* ‚Äî —Å—ä–µ—Å—Ç—å 5 –º–æ–±–æ–≤\n3. üíé *–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä* ‚Äî —Å–æ–±—Ä–∞—Ç—å 3 —Ä–∞–∑–Ω—ã—Ö –±–æ–Ω—É—Å–∞\n4. üßó *–ê–ª—å–ø–∏–Ω–∏—Å—Ç* ‚Äî –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å '–ü–µ—â–µ—Ä–∞'\n5. üå≥ *–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –ª–µ—Å–æ–≤* ‚Äî –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å '–õ–µ—Å'"
    kb = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.answer()
    kb = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
        [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="show_leaderboard")],
        [InlineKeyboardButton(text="üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")]
    ]
    await callback.message.edit_text(
        "üêç *Snake RPG Evolution*\n\n–°—ä–µ–¥–∞–π –µ–¥—É, –∏–∑–±–µ–≥–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, —Å–æ–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã –∏ –º–æ–±–æ–≤!\n–ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –∑–º–µ—è ‚Äî —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.MARKDOWN
    )

def check_achievements(game: 'Game') -> list:
    a = []
    if game.score >= 10: a.append("üå± –ù–æ–≤–∏—á–æ–∫")
    if game.mobs_eaten >= 5: a.append("üêâ –û—Ö–æ—Ç–Ω–∏–∫")
    if len(game.bonuses_collected) >= 3: a.append("üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä")
    if game.level == 2: a.append("üßó –ê–ª—å–ø–∏–Ω–∏—Å—Ç")
    if game.level == 3: a.append("üå≥ –ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –ª–µ—Å–æ–≤")
    return a

@dp.message()
async def any_message(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")

async def on_startup():
    logging.info("üîÑ [SYSTEM] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logging.info("üóëÔ∏è [SYSTEM] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫...")
    await bot.delete_webhook(drop_pending_updates=True)
    await asyncio.sleep(1)

    webhook_info = await bot.get_webhook_info()
    logging.info(f"üì° [SYSTEM] –¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: '{webhook_info.url}'")

    if webhook_info.url != WEBHOOK_URL:
        logging.info(f"üîó [SYSTEM] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        result = await bot.set_webhook(WEBHOOK_URL)
        if result:
            logging.info("‚úÖ [SYSTEM] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            logging.error("‚ùå [SYSTEM] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫!")
    else:
        logging.info("‚úÖ [SYSTEM] –í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def on_shutdown():
    logging.info("üëã [SYSTEM] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.delete_webhook()
    logging.info("üóëÔ∏è [SYSTEM] –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω.")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()

    logging.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT} —Å –≤–µ–±—Ö—É–∫–æ–º {WEBHOOK_URL}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
