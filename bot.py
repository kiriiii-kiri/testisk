import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from game import Game
from database import init_db, get_user_record, update_user_record, get_top_players

# üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –ß–ò–°–¢–´–ô URL ‚Äî –û–ë–†–ï–ó–ê–ï–ú –ü–†–û–ë–ï–õ–´!
BOT_TOKEN = "8498252537:AAFS94y2DJEUOVjOZHx0boHiVvbMrV1T7dc"
WEBHOOK_URL = "https://testisk-zmeika.onrender.com/webhook".strip()  # ‚Üê .strip() –£–î–ê–õ–Ø–ï–¢ –í–°–ï –ü–†–û–ë–ï–õ–´!

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

init_db()
active_games = {}


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    kb = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
        [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="show_leaderboard")],
        [InlineKeyboardButton(text="üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="show_achievements")]
    ]
    await message.answer(
        "üêç *Snake RPG Evolution*\n\n–°—ä–µ–¥–∞–π –µ–¥—É, –∏–∑–±–µ–≥–∞–π –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, —Å–æ–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã –∏ –º–æ–±–æ–≤!\n–ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –∑–º–µ—è ‚Äî —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query(lambda c: c.data == "start_game")
async def start_game(callback: types.CallbackQuery):
    logging.info(f"üéÆ –ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    await callback.answer()  # ‚Üê –û–¢–í–ï–ß–ê–ï–ú –ù–ê –ö–ù–û–ü–ö–£!

    user_id = callback.from_user.id
    username = callback.from_user.username or f"User{user_id}"
    game = Game(user_id, username)
    active_games[user_id] = game
    await update_game_message(callback.message, game)
    await send_control_buttons(callback.message, game)

@dp.callback_query(lambda c: c.data.startswith("move_"))
async def handle_move(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in active_games:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é!", show_alert=True)
        return
    game = active_games[user_id]
    if not game.is_alive:
        await callback.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    direction = callback.data.split("_")[1]
    game.move(direction)
    await update_game_message(callback.message, game)
    if not game.is_alive:
        record_updated = update_user_record(game.user_id, game.username, game.score)
        achievements = check_achievements(game)
        msg = f"üíÄ *GAME OVER*\n\n–û—á–∫–∏: {game.score}\n–î–ª–∏–Ω–∞: {len(game.snake)}"
        if record_updated: msg += "\n\nüèÜ *–ù–æ–≤—ã–π –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥!*"
        if achievements: msg += "\n\nüéñÔ∏è *–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n" + "\n".join(achievements)
        kb = [[InlineKeyboardButton(text="üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start_game")]]
        await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode=ParseMode.MARKDOWN)
        del active_games[user_id]
        return
    await send_control_buttons(callback.message, game)

@dp.callback_query(lambda c: c.data == "show_leaderboard")
async def show_leaderboard(callback: types.CallbackQuery):
    top_players = get_top_players()
    msg = "üèÜ *–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:*\n\n" + "\n".join(f"{i}. @{username} ‚Äî {score} –æ—á–∫–æ–≤" for i, (username, score) in enumerate(top_players, 1))
    kb = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_game")]]
    await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "show_achievements")
async def show_achievements(callback: types.CallbackQuery):
    msg = "üéñÔ∏è *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n1. üå± *–ù–æ–≤–∏—á–æ–∫* ‚Äî –Ω–∞–±—Ä–∞—Ç—å 10 –æ—á–∫–æ–≤\n2. üêâ *–û—Ö–æ—Ç–Ω–∏–∫* ‚Äî —Å—ä–µ—Å—Ç—å 5 –º–æ–±–æ–≤\n3. üíé *–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä* ‚Äî —Å–æ–±—Ä–∞—Ç—å 3 —Ä–∞–∑–Ω—ã—Ö –±–æ–Ω—É—Å–∞\n4. üßó *–ê–ª—å–ø–∏–Ω–∏—Å—Ç* ‚Äî –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å '–ü–µ—â–µ—Ä–∞'\n5. üå≥ *–ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –ª–µ—Å–æ–≤* ‚Äî –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å '–õ–µ—Å'"
    kb = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start_game")]]
    await callback.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb), parse_mode=ParseMode.MARKDOWN)

async def update_game_message(message: types.Message, game: 'Game'):
    board = game.render_board()
    status = f"\n–û—á–∫–∏: {game.score} üéØ | –î–ª–∏–Ω–∞: {len(game.snake)} üêç | –£—Ä–æ–≤–µ–Ω—å: {game.level_name}"
    try:
        await message.edit_text(f"```\n{board}\n```\n{status}", parse_mode=ParseMode.MARKDOWN)
    except:
        pass

async def send_control_buttons(message: types.Message, game: 'Game'):
    kb = [
        [InlineKeyboardButton(text="‚¨ÜÔ∏è", callback_data="move_up")],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="move_left"),
            InlineKeyboardButton(text="‚¨áÔ∏è", callback_data="move_down"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="move_right")
        ]
    ]
    try:
        await message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    except:
        pass

def check_achievements(game: 'Game') -> list:
    a = []
    if game.score >= 10: a.append("üå± –ù–æ–≤–∏—á–æ–∫")
    if game.mobs_eaten >= 5: a.append("üêâ –û—Ö–æ—Ç–Ω–∏–∫")
    if len(game.bonuses_collected) >= 3: a.append("üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä")
    if game.level == 2: a.append("üßó –ê–ª—å–ø–∏–Ω–∏—Å—Ç")
    if game.level == 3: a.append("üå≥ –ü–æ–∫–æ—Ä–∏—Ç–µ–ª—å –ª–µ—Å–æ–≤")
    return a

@dp.message()
async def any_message(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
    
async def on_startup():
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
    
    # –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –õ–Æ–ë–û–ô —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫
    logging.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫...")
    await bot.delete_webhook(drop_pending_updates=True)
    await asyncio.sleep(1)  # –î–∞—ë–º Telegram –≤—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞
    webhook_info = await bot.get_webhook_info()
    logging.info(f"üì° –¢–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫: '{webhook_info.url}'")

    # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ù–û–í–´–ô –≤–µ–±—Ö—É–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è
    if webhook_info.url != WEBHOOK_URL:
        logging.info(f"üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        result = await bot.set_webhook(WEBHOOK_URL)
        if result:
            logging.info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫!")
    else:
        logging.info("‚úÖ –í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")

async def on_shutdown():
    logging.info("üëã –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    await bot.delete_webhook()
    logging.info("üóëÔ∏è –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω.")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling ‚Äî –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    await dp.start_polling(
        bot,
        allowed_updates=["message", "callback_query"],
        handle_as_tasks=True,
        polling_timeout=30
    )

if __name__ == "__main__":
    asyncio.run(main())
