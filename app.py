import asyncio
import logging
import os
import aiohttp
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from game import Game
    from database import init_db, get_user_record, update_user_record, get_top_players
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class Game:
        def __init__(self, *args): pass
    def init_db(): pass
    def get_user_record(*args): return 0
    def update_user_record(*args): return False
    def get_top_players(): return []

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("BOT_TOKEN", "8498252537:AAFS94y2DJEUOVjOZHx0boHiVvbMrV1T7dc")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://testisk-zmeika.onrender.com").strip()
PORT = int(os.environ.get('PORT', 10000))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_games = {}
game_locks = {}

def get_user_lock(user_id: int) -> asyncio.Lock:
    if user_id not in game_locks:
        game_locks[user_id] = asyncio.Lock()
    return game_locks[user_id]

# Health check endpoint
async def health_check(request):
    """Enhanced health check –¥–ª—è UptimeRobot –∏ Render"""
    logger.info("üîç Health check –∑–∞–ø—Ä–æ—Å")
    return web.Response(
        text="üêç Snake RPG Bot is alive and well!",
        status=200,
        headers={'Content-Type': 'text/plain'}
    )

async def home_page(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Snake RPG Bot</title>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
            .status { color: green; font-weight: bold; }
        </style>
    </head>
    <body>
        <h1>üêç Snake RPG Bot</h1>
        <p class="status">‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ UptimeRobot</p>
        <p>Telegram: <a href="https://t.me/teeeeeeeeeeeeeeeeestttttt_bot">@teeeeeeeeeeeeeeeeestttttt_bot</a></p>
    </body>
    </html>
    """
    return web.Response(text=html, content_type='text/html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    kb = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")],
        [InlineKeyboardButton(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="show_leaderboard")],
    ]
    await message.answer(
        "üêç *Snake RPG Evolution*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.MARKDOWN
    )

@dp.callback_query(lambda c: c.data == "start_game")
async def start_game(callback: types.CallbackQuery):
    await callback.answer("–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
    await callback.message.answer("üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

@dp.message()
async def any_message(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")

async def on_startup():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ Snake RPG Bot...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        await bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(1)
        
        webhook_url = f"{WEBHOOK_URL}/webhook"
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

async def on_shutdown():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.delete_webhook()

async def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # Health check endpoints
    app.router.add_get('/', home_page)
    app.router.add_get('/health', health_check)
    app.router.add_get('/ping', health_check)
    app.router.add_get('/status', health_check)
    
    # Webhook –¥–ª—è Telegram
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    return app

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    app = await create_app()
    runner = web.AppRunner(app)
    
    try:
        await runner.setup()
        site = web.TCPSite(runner, host='0.0.0.0', port=PORT)
        await site.start()
        
        logger.info(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        logger.info(f"üåê Health check: http://0.0.0.0:{PORT}/health")
        logger.info(f"ü§ñ Webhook: {WEBHOOK_URL}/webhook")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        while True:
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            logger.info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
