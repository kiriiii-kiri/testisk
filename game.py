import random
from utils import generate_obstacles, generate_portal_pair

BOARD_SIZE = 10

class Game:
    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username
        self.level = 1  # 1=–ü–µ—â–µ—Ä–∞, 2=–†–∞–≤–Ω–∏–Ω–∞, 3=–õ–µ—Å
        self.level_names = {1: "–ü–µ—â–µ—Ä–∞ üï≥Ô∏è", 2: "–†–∞–≤–Ω–∏–Ω–∞ üåæ", 3: "–õ–µ—Å üå≤"}
        self.level_name = self.level_names[self.level]
        self.snake = [(5, 5)]  # –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.direction = "right"
        self.score = 0
        self.is_alive = True
        self.food = self.spawn_food()
        self.bonus = None
        self.bonus_type = None
        self.bonus_timer = 0
        self.portal1 = None
        self.portal2 = None
        self.mobs = []
        self.obstacles = generate_obstacles(self.level)
        self.mobs_eaten = 0
        self.bonuses_collected = set()
        self.spawn_bonus()
        self.spawn_portal()
        self.spawn_mobs()

    def spawn_food(self):
        while True:
            x = random.randint(0, BOARD_SIZE - 1)
            y = random.randint(0, BOARD_SIZE - 1)
            pos = (x, y)
            if pos not in self.snake and pos not in self.obstacles and pos != self.bonus and pos != self.portal1 and pos != self.portal2 and pos not in self.mobs:
                return pos

    def spawn_bonus(self):
        if random.random() < 0.3 and not self.bonus:
            bonus_types = ["speed_up", "grow", "invincibility", "score_x2", "clear_path", "reverse", "teleport"]
            self.bonus_type = random.choice(bonus_types)
            self.bonus = self.spawn_food()
            self.bonus_timer = 10  # –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 10 —Ö–æ–¥–æ–≤

    def spawn_portal(self):
        if random.random() < 0.2:
            self.portal1, self.portal2 = generate_portal_pair(self.snake, self.obstacles, self.food, BOARD_SIZE)

    def spawn_mobs(self):
        mob_count = {1: 1, 2: 2, 3: 3}[self.level]
        for _ in range(mob_count):
            while True:
                x = random.randint(0, BOARD_SIZE - 1)
                y = random.randint(0, BOARD_SIZE - 1)
                pos = (x, y)
                if pos not in self.snake and pos not in self.obstacles and pos != self.food and pos != self.bonus and pos != self.portal1 and pos != self.portal2 and pos not in self.mobs:
                    self.mobs.append(pos)
                    break

    def move(self, direction):
        self.direction = direction
        head_x, head_y = self.snake[0]

        if direction == "up":
            new_head = (head_x - 1, head_y)
        elif direction == "down":
            new_head = (head_x + 1, head_y)
        elif direction == "left":
            new_head = (head_x, head_y - 1)
        elif direction == "right":
            new_head = (head_x, head_y + 1)
        else:
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if not (0 <= new_head[0] < BOARD_SIZE and 0 <= new_head[1] < BOARD_SIZE):
            self.is_alive = False
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–æ–±–æ–π
        if new_head in self.snake:
            self.is_alive = False
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º
        if new_head in self.obstacles:
            self.is_alive = False
            return

        # –ü–æ—Ä—Ç–∞–ª—ã
        if new_head == self.portal1 and self.portal2:
            new_head = self.portal2
        elif new_head == self.portal2 and self.portal1:
            new_head = self.portal1

        # –°—ä–µ–ª –µ–¥—É?
        ate_food = False
        if new_head == self.food:
            self.score += 1
            ate_food = True
            self.food = self.spawn_food()
            self.spawn_bonus()
            self.spawn_portal()
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤
            if self.score % 10 == 0 and self.level < 3:
                self.level += 1
                self.level_name = self.level_names[self.level]
                self.obstacles = generate_obstacles(self.level)
                self.spawn_mobs()

        # –°—ä–µ–ª –±–æ–Ω—É—Å?
        if new_head == self.bonus and self.bonus:
            self.apply_bonus()
            self.bonus = None
            self.bonus_type = None

        # –°—ä–µ–ª –º–æ–±–∞?
        if new_head in self.mobs:
            if len(self.snake) >= 5:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ >= 5
                mob_points = random.randint(1, 3)
                self.score += mob_points
                self.mobs_eaten += 1
                self.mobs.remove(new_head)
                self.spawn_mobs()  # –†–µ—Å–ø–∞–≤–Ω –º–æ–±–∞

        # –î–≤–∏–≥–∞–µ–º –∑–º–µ—é
        self.snake.insert(0, new_head)
        if not ate_food:
            self.snake.pop()

        # –¢–∞–π–º–µ—Ä –±–æ–Ω—É—Å–∞
        if self.bonus:
            self.bonus_timer -= 1
            if self.bonus_timer <= 0:
                self.bonus = None
                self.bonus_type = None

    def apply_bonus(self):
        self.bonuses_collected.add(self.bonus_type)
        if self.bonus_type == "speed_up":
            # –í–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –≤–ª–∏—è–µ—Ç ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º
            self.score += 2
        elif self.bonus_type == "grow":
            self.snake.append(self.snake[-1])  # —É–¥–ª–∏–Ω—è–µ–º –Ω–∞ 1
            self.score += 3
        elif self.bonus_type == "invincibility":
            # –ó–∞—â–∏—Ç–∞ –Ω–∞ 5 —Ö–æ–¥–æ–≤ ‚Äî MVP: –ø—Ä–æ—Å—Ç–æ –æ—á–∫–∏
            self.score += 5
        elif self.bonus_type == "score_x2":
            self.score += 4  # –±–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        elif self.bonus_type == "clear_path":
            # –£–±–∏—Ä–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            for _ in range(min(3, len(self.obstacles))):
                if self.obstacles:
                    self.obstacles.pop(0)
            self.score += 5
        elif self.bonus_type == "reverse":
            self.snake.reverse()
            self.score += 2
        elif self.bonus_type == "teleport":
            # –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ–≤—É –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
            while True:
                x = random.randint(0, BOARD_SIZE - 1)
                y = random.randint(0, BOARD_SIZE - 1)
                pos = (x, y)
                if pos not in self.obstacles and pos != self.food and pos not in self.mobs:
                    self.snake[0] = pos
                    break
            self.score += 3

    def render_board(self):
        board = [["‚¨ú" for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]

        # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        for obs in self.obstacles:
            if self.level == 1:
                board[obs[0]][obs[1]] = "ü™®"  # –ü–µ—â–µ—Ä–∞ ‚Äî –∫–∞–º–Ω–∏
            elif self.level == 2:
                board[obs[0]][obs[1]] = "üåø"  # –†–∞–≤–Ω–∏–Ω–∞ ‚Äî –∫—É—Å—Ç—ã
            elif self.level == 3:
                board[obs[0]][obs[1]] = "üå≥"  # –õ–µ—Å ‚Äî –¥–µ—Ä–µ–≤—å—è

        # –ï–¥–∞
        if self.food:
            fx, fy = self.food
            board[fx][fy] = "üçé"

        # –ë–æ–Ω—É—Å
        if self.bonus:
            bx, by = self.bonus
            if self.bonus_type == "speed_up":
                board[bx][by] = "‚ö°"
            elif self.bonus_type == "grow":
                board[bx][by] = "üíä"
            elif self.bonus_type == "invincibility":
                board[bx][by] = "üõ°Ô∏è"
            elif self.bonus_type == "score_x2":
                board[bx][by] = "üí∞"
            elif self.bonus_type == "clear_path":
                board[bx][by] = "üß®"  # –í–∑—Ä—ã–≤!
            elif self.bonus_type == "reverse":
                board[bx][by] = "üîÑ"
            elif self.bonus_type == "teleport":
                board[bx][by] = "üåÄ"  # –ü–æ—Ä—Ç–∞–ª-–±–æ–Ω—É—Å (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –ø–∞—Ä–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤)

        # –ü–æ—Ä—Ç–∞–ª—ã
        if self.portal1:
            px, py = self.portal1
            board[px][py] = "üîµ"
        if self.portal2:
            px, py = self.portal2
            board[px][py] = "üî¥"

        # –ú–æ–±—ã
        for mob in self.mobs:
            mx, my = mob
            board[mx][my] = "üëæ"

        # –ó–º–µ—è
        for i, (x, y) in enumerate(self.snake):
            if i == 0:
                board[x][y] = "üü¢"  # –ì–æ–ª–æ–≤–∞
            else:
                board[x][y] = "üü©"  # –¢–µ–ª–æ

        return "\n".join("".join(row) for row in board)
